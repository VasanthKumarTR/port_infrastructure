# GitHub Actions Workflow for Port Infrastructure Deployment
# This workflow deploys the Port.io infrastructure configuration using OpenTofu

name: Deploy Port Infrastructure

on:
  push:
    branches: [main]
    paths:
      - '**.tofu'
      - '**.tf'
      - 'examples/**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [main]
    paths:
      - '**.tofu'
      - '**.tf'
      - 'examples/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - prod
      destroy:
        description: 'Run destroy instead of apply'
        required: false
        default: false
        type: boolean

env:
  TF_VAR_port_client_id: ${{ secrets.PORT_CLIENT_ID }}
  TF_VAR_port_client_secret: ${{ secrets.PORT_CLIENT_SECRET }}
  TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_github_app_id: ${{ secrets.GH_APP_ID }}
  TF_VAR_github_private_key: ${{ secrets.GH_PRIVATE_KEY }}
  TF_VAR_github_installation_id: ${{ secrets.GH_INSTALLATION_ID }}
  TF_VAR_azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
  TF_VAR_azure_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
  TF_VAR_azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
  TF_VAR_azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  TF_VAR_snyk_token: ${{ secrets.SNYK_TOKEN }}

jobs:
  plan:
    name: OpenTofu Plan
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.6.0

      - name: Configure environment variables
        run: |
          echo "TF_VAR_environment=${{ github.event.inputs.environment || 'staging' }}" >> $GITHUB_ENV
          echo "TF_VAR_team_email=platform@yourcompany.com" >> $GITHUB_ENV
          echo "TF_VAR_github_organization=${{ github.repository_owner }}" >> $GITHUB_ENV
          echo "TF_VAR_github_actions_repo=${{ github.event.repository.name }}" >> $GITHUB_ENV

      - name: Initialize OpenTofu
        run: |
          tofu init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=port-infrastructure/${{ github.event.inputs.environment || 'staging' }}/terraform.tfstate" \
            -backend-config="region=${{ vars.AWS_REGION || 'us-west-2' }}"

      - name: Validate configuration
        run: tofu validate

      - name: Plan infrastructure changes
        run: |
          tofu plan \
            -var-file="examples/terraform.tfvars.${{ github.event.inputs.environment || 'staging' }}" \
            -out=tfplan

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ github.event.inputs.environment || 'staging' }}
          path: tfplan
          retention-days: 5

      - name: Comment PR with plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { exec } = require('child_process');
            
            exec('tofu show -no-color tfplan', (error, stdout, stderr) => {
              if (error) {
                console.error(`Error: ${error}`);
                return;
              }
              
              const output = stdout.slice(0, 65536); // Limit to 64KB
              const comment = `## OpenTofu Plan Results
              
              \`\`\`hcl
              ${output}
              \`\`\`
              
              Plan generated for environment: ${{ github.event.inputs.environment || 'staging' }}`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            });

  apply:
    name: OpenTofu Apply
    needs: plan
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.6.0

      - name: Configure environment variables
        run: |
          echo "TF_VAR_environment=${{ github.event.inputs.environment || 'staging' }}" >> $GITHUB_ENV
          echo "TF_VAR_team_email=platform@yourcompany.com" >> $GITHUB_ENV
          echo "TF_VAR_github_organization=${{ github.repository_owner }}" >> $GITHUB_ENV
          echo "TF_VAR_github_actions_repo=${{ github.event.repository.name }}" >> $GITHUB_ENV

      - name: Initialize OpenTofu
        run: |
          tofu init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=port-infrastructure/${{ github.event.inputs.environment || 'staging' }}/terraform.tfstate" \
            -backend-config="region=${{ vars.AWS_REGION || 'us-west-2' }}"

      - name: Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ github.event.inputs.environment || 'staging' }}

      - name: Apply infrastructure changes
        if: ${{ !github.event.inputs.destroy }}
        run: tofu apply -auto-approve tfplan

      - name: Destroy infrastructure
        if: ${{ github.event.inputs.destroy }}
        run: |
          tofu plan -destroy \
            -var-file="examples/terraform.tfvars.${{ github.event.inputs.environment || 'staging' }}" \
            -out=destroy-plan
          tofu apply -auto-approve destroy-plan

      - name: Output deployment results
        if: ${{ !github.event.inputs.destroy }}
        run: |
          tofu output -json > outputs.json
          echo "## Deployment Results" >> $GITHUB_STEP_SUMMARY
          echo "Environment: ${{ github.event.inputs.environment || 'staging' }}" >> $GITHUB_STEP_SUMMARY
          echo "### Created Resources:" >> $GITHUB_STEP_SUMMARY
          tofu output port_catalog_summary >> $GITHUB_STEP_SUMMARY

      - name: Notify deployment success
        if: success() && !github.event.inputs.destroy
        uses: actions/github-script@v7
        with:
          script: |
            const environment = '${{ github.event.inputs.environment || 'staging' }}';
            const message = `üöÄ Port infrastructure successfully deployed to ${environment}!
            
            **Deployment Details:**
            - Environment: ${environment}
            - Commit: ${context.sha.substring(0, 7)}
            - Actor: ${context.actor}
            - Workflow: ${context.workflow}
            
            Check your Port.io organization to see the new configuration.`;
            
            // Create a deployment status
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: 'success',
              description: `Deployed to ${environment}`,
              environment: environment
            });

      - name: Notify deployment failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const environment = '${{ github.event.inputs.environment || 'staging' }}';
            const message = `‚ùå Port infrastructure deployment failed for ${environment}!
            
            **Deployment Details:**
            - Environment: ${environment}
            - Commit: ${context.sha.substring(0, 7)}
            - Actor: ${context.actor}
            - Workflow: ${context.workflow}
            
            Please check the workflow logs for details.`;
            
            // Create a failed deployment status
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: 'failure',
              description: `Failed to deploy to ${environment}`,
              environment: environment
            });

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Checkov static analysis
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          quiet: true
          soft_fail: true
          framework: terraform
          output_format: sarif
          output_file_path: reports/results.sarif

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/results.sarif
